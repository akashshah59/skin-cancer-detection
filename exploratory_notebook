{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":63056,"databundleVersionId":8940774,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport os\n\n# for dirname, _, filenames in os.walk('/kaggle/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-10T17:36:46.249658Z","iopub.status.idle":"2024-07-10T17:36:46.250036Z","shell.execute_reply.started":"2024-07-10T17:36:46.249830Z","shell.execute_reply":"2024-07-10T17:36:46.249845Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"HOME_DIRECTORY = 'kaggle/input/isic-2024-challenge/'\ntrain_metadata = pd.read_csv('/kaggle/input/isic-2024-challenge/train-metadata.csv',low_memory = True)\ntest_metadata = pd.read_csv('/kaggle/input/isic-2024-challenge/test-metadata.csv',low_memory =True)","metadata":{"execution":{"iopub.status.busy":"2024-07-10T17:36:46.251156Z","iopub.status.idle":"2024-07-10T17:36:46.251522Z","shell.execute_reply.started":"2024-07-10T17:36:46.251343Z","shell.execute_reply":"2024-07-10T17:36:46.251359Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_metadata.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-10T17:36:46.252887Z","iopub.status.idle":"2024-07-10T17:36:46.253284Z","shell.execute_reply.started":"2024-07-10T17:36:46.253095Z","shell.execute_reply":"2024-07-10T17:36:46.253110Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_metadata.isic_id.nunique() ","metadata":{"execution":{"iopub.status.busy":"2024-07-10T17:36:46.255123Z","iopub.status.idle":"2024-07-10T17:36:46.255514Z","shell.execute_reply.started":"2024-07-10T17:36:46.255316Z","shell.execute_reply":"2024-07-10T17:36:46.255332Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_metadata.target.mean()","metadata":{"execution":{"iopub.status.busy":"2024-07-10T17:36:46.256454Z","iopub.status.idle":"2024-07-10T17:36:46.256787Z","shell.execute_reply.started":"2024-07-10T17:36:46.256620Z","shell.execute_reply":"2024-07-10T17:36:46.256635Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_metadata.patient_id.nunique()","metadata":{"execution":{"iopub.status.busy":"2024-07-10T17:36:46.258668Z","iopub.status.idle":"2024-07-10T17:36:46.259056Z","shell.execute_reply.started":"2024-07-10T17:36:46.258841Z","shell.execute_reply":"2024-07-10T17:36:46.258856Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_metadata.groupby(['patient_id']).agg({'target':'sum'}).sort_values('target',ascending = False).head(5)","metadata":{"execution":{"iopub.status.busy":"2024-07-10T17:36:46.260657Z","iopub.status.idle":"2024-07-10T17:36:46.261053Z","shell.execute_reply.started":"2024-07-10T17:36:46.260833Z","shell.execute_reply":"2024-07-10T17:36:46.260848Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_metadata[train_metadata.patient_id == 'IP_2456971']","metadata":{"execution":{"iopub.status.busy":"2024-07-10T17:36:46.262453Z","iopub.status.idle":"2024-07-10T17:36:46.262841Z","shell.execute_reply.started":"2024-07-10T17:36:46.262645Z","shell.execute_reply":"2024-07-10T17:36:46.262660Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_only_features = ['lesion_id','iddx_full','iddx_1','iddx_2','iddx_3','iddx_4','iddx_5','mel_mitotic_index','mel_thick_mm','tbp_lv_dnn_lesion_confidence']","metadata":{"execution":{"iopub.status.busy":"2024-07-10T17:36:46.264303Z","iopub.status.idle":"2024-07-10T17:36:46.264756Z","shell.execute_reply.started":"2024-07-10T17:36:46.264524Z","shell.execute_reply":"2024-07-10T17:36:46.264544Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_compressed = train_metadata.drop(train_only_features, axis = 1)","metadata":{"execution":{"iopub.status.busy":"2024-07-10T17:36:46.266434Z","iopub.status.idle":"2024-07-10T17:36:46.266779Z","shell.execute_reply.started":"2024-07-10T17:36:46.266597Z","shell.execute_reply":"2024-07-10T17:36:46.266611Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_compressed.shape ","metadata":{"execution":{"iopub.status.busy":"2024-07-10T17:36:46.268181Z","iopub.status.idle":"2024-07-10T17:36:46.268533Z","shell.execute_reply.started":"2024-07-10T17:36:46.268364Z","shell.execute_reply":"2024-07-10T17:36:46.268379Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_compressed.dtypes[train_compressed.dtypes == 'object']","metadata":{"execution":{"iopub.status.busy":"2024-07-10T17:36:46.269594Z","iopub.status.idle":"2024-07-10T17:36:46.270061Z","shell.execute_reply.started":"2024-07-10T17:36:46.269799Z","shell.execute_reply":"2024-07-10T17:36:46.269818Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install lightgbm ","metadata":{"execution":{"iopub.status.busy":"2024-07-10T17:36:46.271381Z","iopub.status.idle":"2024-07-10T17:36:46.271854Z","shell.execute_reply.started":"2024-07-10T17:36:46.271607Z","shell.execute_reply":"2024-07-10T17:36:46.271627Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from category_encoders.hashing import HashingEncoder\nfrom sklearn.pipeline import make_pipeline \nfrom sklearn.impute import KNNImputer\nfrom lightgbm import LGBMClassifier","metadata":{"execution":{"iopub.status.busy":"2024-07-10T17:36:46.273187Z","iopub.status.idle":"2024-07-10T17:36:46.273670Z","shell.execute_reply.started":"2024-07-10T17:36:46.273419Z","shell.execute_reply":"2024-07-10T17:36:46.273439Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"lgb_params = {\n    'objective': 'binary',\n    \"random_state\": 42,\n    \"n_estimators\": 500,\n    'learning_rate': 0.01,\n    'bagging_freq': 1,\n    'pos_bagging_fraction': 0.75,\n    'neg_bagging_fraction': 0.05,\n    'feature_fraction': 0.8,\n    'lambda_l1': 0.8,\n    'lambda_l2': 0.8,\n    \"verbosity\": -1,\n    # \"extra_trees\": True\n}\n\npip = make_pipeline(HashingEncoder(),\n                    KNNImputer(),\n                    LGBMClassifier(**lgb_params)) ","metadata":{"execution":{"iopub.status.busy":"2024-07-10T17:36:46.274752Z","iopub.status.idle":"2024-07-10T17:36:46.275217Z","shell.execute_reply.started":"2024-07-10T17:36:46.274982Z","shell.execute_reply":"2024-07-10T17:36:46.275002Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"%time\npip.fit(train_compressed.drop('target',\n                              axis = 1), train_compressed['target'])","metadata":{"execution":{"iopub.status.busy":"2024-07-10T17:36:46.276995Z","iopub.status.idle":"2024-07-10T17:36:46.277499Z","shell.execute_reply.started":"2024-07-10T17:36:46.277212Z","shell.execute_reply":"2024-07-10T17:36:46.277257Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\"\"\"\nimport pickle\n\nwith open('metadata-model.pkl','wb') as f:\n    pickle.dump(pip,f)\n\"\"\"","metadata":{"execution":{"iopub.status.busy":"2024-07-10T17:36:46.278626Z","iopub.status.idle":"2024-07-10T17:36:46.279103Z","shell.execute_reply.started":"2024-07-10T17:36:46.278838Z","shell.execute_reply":"2024-07-10T17:36:46.278857Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"probs = pip.predict_proba(test_metadata)[:,1]\ntest_metadata['target'] = probs","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_metadata[['isic_id','target']].to_csv('submission.csv', index = False)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import torchvision.models as models\nimport torch\nimport torch.nn as nn\n\nmodel = models.squeezenet1_1(pretrained=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-10T23:59:22.689168Z","iopub.execute_input":"2024-07-10T23:59:22.689844Z","iopub.status.idle":"2024-07-10T23:59:26.066624Z","shell.execute_reply.started":"2024-07-10T23:59:22.689816Z","shell.execute_reply":"2024-07-10T23:59:26.065799Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=SqueezeNet1_1_Weights.IMAGENET1K_V1`. You can also use `weights=SqueezeNet1_1_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\nDownloading: \"https://download.pytorch.org/models/squeezenet1_1-b8a52dc0.pth\" to /root/.cache/torch/hub/checkpoints/squeezenet1_1-b8a52dc0.pth\n100%|██████████| 4.73M/4.73M [00:00<00:00, 66.0MB/s]\n","output_type":"stream"}]},{"cell_type":"code","source":"for p in model.features.parameters():\n    p.requires_grad = False\n\nmodel.classifier.add_module('flatten', nn.Flatten())\nmodel.classifier.add_module('fc', nn.Linear(1000,1))\nmodel.classifier.add_module('sigmoid',nn.Sigmoid())","metadata":{"execution":{"iopub.status.busy":"2024-07-10T23:59:26.068544Z","iopub.execute_input":"2024-07-10T23:59:26.069182Z","iopub.status.idle":"2024-07-10T23:59:26.075141Z","shell.execute_reply.started":"2024-07-10T23:59:26.069153Z","shell.execute_reply":"2024-07-10T23:59:26.074248Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":"HOME_DIRECTORY","metadata":{}},{"cell_type":"code","source":"import pandas as pd \n\nHOME_DIRECTORY = '/kaggle/input/isic-2024-challenge/'\ndf = pd.read_csv(HOME_DIRECTORY + 'train-metadata.csv')","metadata":{"execution":{"iopub.status.busy":"2024-07-10T23:59:27.524210Z","iopub.execute_input":"2024-07-10T23:59:27.524574Z","iopub.status.idle":"2024-07-10T23:59:34.996391Z","shell.execute_reply.started":"2024-07-10T23:59:27.524547Z","shell.execute_reply":"2024-07-10T23:59:34.995577Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_33/3451248377.py:4: DtypeWarning: Columns (51,52) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv(HOME_DIRECTORY + 'train-metadata.csv')\n","output_type":"stream"}]},{"cell_type":"code","source":"import torch\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-10T23:59:34.997826Z","iopub.execute_input":"2024-07-10T23:59:34.998119Z","iopub.status.idle":"2024-07-10T23:59:35.032623Z","shell.execute_reply.started":"2024-07-10T23:59:34.998095Z","shell.execute_reply":"2024-07-10T23:59:35.031514Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Using device: cuda\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\"Available devices:\")\nif torch.cuda.is_available():\n    for i in range(torch.cuda.device_count()):\n        print(f\"CUDA:{i} - {torch.cuda.get_device_name(i)}\")\n    model = nn.DataParallel(model).to(device)\nelse:\n    print(\"CPU\")\n\n# Get the current device\ncurrent_device = torch.cuda.current_device()\nprint(f\"\\nCurrent device: {current_device}\")\n\n# Get the default device\ndefault_device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Default device: {default_device}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-07-10T23:59:35.033787Z","iopub.execute_input":"2024-07-10T23:59:35.034654Z","iopub.status.idle":"2024-07-10T23:59:35.192407Z","shell.execute_reply.started":"2024-07-10T23:59:35.034628Z","shell.execute_reply":"2024-07-10T23:59:35.191420Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Available devices:\nCUDA:0 - Tesla P100-PCIE-16GB\n\nCurrent device: 0\nDefault device: cuda\n","output_type":"stream"}]},{"cell_type":"code","source":"import torch\nimport torchvision.transforms as transforms\nfrom PIL import Image\nfrom torch.utils.data import Dataset, DataLoader\nimport numpy as np\nimport os\n\nclass TrainSkinDataset(Dataset):\n    \"\"\"Predict melanoma cancer\"\"\"\n\n    def __init__(self, csv_file, root_dir, transform=None):\n        \"\"\"\n        Arguments:\n            csv_file (string): Path to the csv file with annotations.\n            root_dir (string): Directory with all the images.\n            transform (callable, optional): Optional transform to be applied\n                on a sample.\n        \"\"\"\n        self.root_dir = root_dir\n        self.train_metadata = pd.read_csv(HOME_DIRECTORY + csv_file, \n                                          usecols = ['isic_id','target'])\n        \n        self.transform = transform\n        \n\n    def __len__(self):\n        return len(self.train_metadata)\n\n    def __getitem__(self, idx):\n        img_name = os.path.join(self.root_dir,\n                                self.train_metadata.iloc[idx, 0] + '.jpg')\n        \n        image = Image.open(img_name).convert('RGB')\n        \n        targets = self.train_metadata.iloc[idx, 1]\n        targets = torch.Tensor([targets]).float()\n        \n        if self.transform:\n            image = self.transform(image)\n        \n        return image,targets\n    \n\nSAMPLE_IMAGE_DIRECTORY = '/kaggle/input/isic-2024-challenge/train-image/image/'\n\n","metadata":{"execution":{"iopub.status.busy":"2024-07-10T23:59:35.194209Z","iopub.execute_input":"2024-07-10T23:59:35.194498Z","iopub.status.idle":"2024-07-10T23:59:35.204266Z","shell.execute_reply.started":"2024-07-10T23:59:35.194468Z","shell.execute_reply":"2024-07-10T23:59:35.203384Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"transform = transforms.Compose([\n                        transforms.Resize(256),\n                        transforms.CenterCrop(224),\n                        transforms.ToTensor(),\n                        transforms.Normalize(mean=[0.485, 0.456, 0.406], \n                                             std=[0.229, 0.224, 0.225])\n                    ])\n\ntrain_dataset = TrainSkinDataset('train-metadata.csv', \n                                     SAMPLE_IMAGE_DIRECTORY, \n                                     transform )\n\ntrain_loader = DataLoader(train_dataset,batch_size = 32)","metadata":{"execution":{"iopub.status.busy":"2024-07-10T23:59:35.205225Z","iopub.execute_input":"2024-07-10T23:59:35.205484Z","iopub.status.idle":"2024-07-10T23:59:37.937525Z","shell.execute_reply.started":"2024-07-10T23:59:35.205451Z","shell.execute_reply":"2024-07-10T23:59:37.936534Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"from torch.optim import Adam\nfrom torch.nn import BCELoss\nimport os\n\n\nopt = Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=0.001)\nloss_function = BCELoss()\nlog_interval = 4000\n\nEPOCHS = 10\nmodel = model.to(device)\n\nfor epoch in range(EPOCHS):\n    model.train()\n    for batch_idx, (features, targets) in enumerate(train_loader):\n        opt.zero_grad()\n        features, targets = features.to(device), targets.to(device)\n        \n        outputs = model(features)\n        loss = loss_function(outputs, targets)\n        loss.backward()\n        opt.step()\n        \n        if batch_idx % log_interval == 0: # every 1%.\n            print(f'Epoch {epoch+1}/{EPOCHS},  Batch {batch_idx}/{len(train_loader)},  Loss: {loss.item():.4f}')        ","metadata":{"execution":{"iopub.status.busy":"2024-07-10T23:59:37.938710Z","iopub.execute_input":"2024-07-10T23:59:37.939069Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"Epoch 1/10,  Batch 0/12534,  Loss: 0.5726\nEpoch 1/10,  Batch 4000/12534,  Loss: 0.0000\nEpoch 1/10,  Batch 8000/12534,  Loss: 0.0000\nEpoch 1/10,  Batch 12000/12534,  Loss: 0.0000\nEpoch 2/10,  Batch 0/12534,  Loss: 0.0000\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-07-10T22:11:01.815340Z","iopub.execute_input":"2024-07-10T22:11:01.816702Z","iopub.status.idle":"2024-07-10T22:11:01.822007Z","shell.execute_reply.started":"2024-07-10T22:11:01.816658Z","shell.execute_reply":"2024-07-10T22:11:01.820724Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}